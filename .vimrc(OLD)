
"call plug#begin('~/local/share/vim/plugged')

"call plug#end()



" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" Avoid side effects when it was already reset.
if &compatible
  set nocompatible
endif

" When the +eval feature is missing, the set command above will be skipped.
" Use a trick to reset compatible only when the +eval feature is missing.
silent! while 0
  set nocompatible
silent! endwhile

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

"set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set wildmenu		" display completion matches in a status line

set ttimeout		" time out for key codes
set ttimeoutlen=100	" wait up to 100ms after Esc for special key

" Show @@@ in the last line if it is truncated.
set display=truncate

" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup fedora
  autocmd!
  " In text files, always limit the width of text to 78 characters
  " autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  " 1724126 - do not open new file with .spec suffix with spec file template
  " apparently there are other file types with .spec suffix, so disable the
  " template
  " autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add $PWD/cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on

  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
  let c_comment_strings=1
  set hlsearch
endif

filetype plugin on

if &term=="xterm"
     set t_Co=8
     set t_Sb=m
     set t_Sf=m
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif

" Don't wake up system with blinking cursor:
let &guicursor = &guicursor . ",a:blinkon0"

" Source a global configuration file if available
if filereadable("/etc/vimrc.local")
  source /etc/vimrc.local
endif

"set number
"set rnu
"------------------------------------------------------------
"Plugin
"Plugin 'lervag/vimtex'








"------------------------------------------------------------
" VimTEX
"
"map <F3> :w | make %<CR><CR>
"
"
"
let g:Tex_MultipleCompileFormats = 'pdf'
let g:Tex_DefaultTargetFormat = 'pdf'

"Plug 'lervag/vimtex'
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
"------------------------------------------------------------
"
"
map <F8> :w <CR> :!gcc -g % -o %< && ./%< <CR>
"map <F9> :w <CR> :!./%< <CR>
"map <F4> :w <CR> :!gcc -g % -o %< && ./%< 
"map! <F4> :!./%< 


map <F5> :w <CR> :!gcc -g % -o %< <CR> 
map <F7> :w  <CR> :packadd termdebug <CR>

"map! <F4> :ciao 
" <CR> include <stdlib.h> <CR> include     <string.h> <CR> int main() <CR> { <CR>       printf(" \n"); <CR>     scan    f("%", &); <CR> return 0; <CR> }  <ESC>

autocmd filetype c nnoremap <F6> :Termdebug %:r<CR><c-w>2j<c-w>L


"------------------------------------------------------------
"Open a terminal
"
map <F2> :below vertical terminal<CR>


"------------------------------------------------------------
"Open explore
"


"------------------------------------------------------------
"TREE
"
map <F10> :NERDTree <CR>
"------------------------------------------------------------
"Maps hjkl to u-hjk"
"noremap l k
"noremap k j
"noremap j u
"noremap h h
"
"
"
"
"Plug in

" Install and run vim-plug on first run
"if empty(glob('~/.vim/autoload/plug.vim'))
 "   silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
  "  \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
   " autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
"endif


"call plug#begin('~/.vim/plugged')
"Plug 'lervag/vimtex'
"Plug 'airblade/vim-gitgutter'
"Plug 'editorconfig/editorconfig-vim'
"Plug 'itchyny/lightline.vim'
"Plug 'junegunn/fzf'
"Plug 'junegunn/fzf.vim'
"Plug 'mattn/emmet-vim'
"Plug 'scrooloose/nerdtree'
"Plug 'terryma/vim-multiple-cursors'
"Plug 'tpope/vim-eunuch'
"Plug 'tpope/vim-surround'
"Plug 'frazrepo/vim-rainbow'
"call plug#end()

"au FileType c,cpp,objc,objcpp call rainbow#load()


so ~/.vim/plugins.vim

"autocmd VimEnter * vsplit
"autocmd VimEnter * ver res -5
"autocmd VimEnter * bel ter 
"autocmd VimEnter * vert bel ter 
"autocmd VimEnter * vert res 53 
"autocmd VimEnter * res -12 "per horiz bel ter  


"autocmd VimEnter * <C-w> <W>
"autocmd VimEnter * vsplit
"autocmd VimEnter * vertical resize  80

autocmd VimEnter * NERDTree
autocmd VimEnter * vert res 20 
let g:rainbow_active = 1

"autocmd VimEnter * Vex 
"autocmd VimEnter * vert res 20 


set colorcolumn=80
set textwidth=80


map <Tab> <C-W>

set tabstop=4

"PLUGINS
set rtp+=~/.vim/PLUGVIM/tabnine-vim


"autocmd VimEnter * tabnew
"
"

call plug#begin('~/.vim/plugged')
Plug 'lervag/vimtex'
Plug 'francoiscabrol/ranger.vim'
Plug 'ilyachur/cmake4vim'
call plug#end()


syntax enable
set background=dark
colorscheme gruvbox

set mouse=a
set go+=a
vmap <C-C> "+y
let g:system_copy#copy_command='xclip -sel clipboard'

let g:airline_theme='gruvbox'                                                                                                             
let g:airline_powerline_fonts = 1                                                                                                         
let g:airline_section_b = '%{getcwd()}' " in section B of the status line display the CWD                                                 
                                                                                                                                          
"TABLINE:                                                                                                                                 
                                                                                                                                          
let g:airline#extensions#tabline#enabled = 1           " enable airline tabline                                                           
let g:airline#extensions#tabline#show_close_button = 0 " remove 'X' at the end of the tabline                                            
let g:airline#extensions#tabline#tabs_label = ''       " can put text here like BUFFERS to denote buffers (I clear it so nothing is shown)
let g:airline#extensions#tabline#buffers_label = ''    " can put text here like TABS to denote tabs (I clear it so nothing is shown)      
let g:airline#extensions#tabline#fnamemod = ':t'       " disable file paths in the tab                                                    
let g:airline#extensions#tabline#show_tab_count = 0    " dont show tab numbers on the right                                                           
let g:airline#extensions#tabline#show_buffers = 0      " dont show buffers in the tabline                                                 
let g:airline#extensions#tabline#tab_min_count = 2     " minimum of 2 tabs needed to display the tabline                                  
let g:airline#extensions#tabline#show_splits = 0       " disables the buffer name that displays on the right of the tabline               
let g:airline#extensions#tabline#show_tab_nr = 0       " disable tab numbers                                                              
let g:airline#extensions#tabline#show_tab_type = 0     " disables the weird ornage arrow on the tabline

set laststatus=2

let NERDTreeShowHidden=1


"nerd commenter
"
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

let mapleader=","
set timeout timeoutlen=1500


"some stuff

noremap <S-f> :FZF <CR>
noremap <S-t> :tabe <CR>
noremap <S-v> :vsp <CR>
"noremap <S-1> :!cat <CR>

":! git add * | git commit -m "%" | git push
noremap <S-y> :! git add * <CR> ! git commit -m "%" <CR> ! git push <CR> 



"call plug#begin()
"Plug 'ilyachur/cmake4vim'
"call plug#end()



"noremap <S-<F3>> :RangerNewTab <CR>
"noremap <S-d> :MakeCmdlineArgs <CR>



noremap <C-e> :!cat %  <CR>
noremap <F4> :wa <CR> :! make <CR>

noremap <C-v> :! valgrind --leak-check=full --show-leak-kinds=all --log-file=Valgrind.txt ./%< <CR>

"Ranger
"
noremap <C-r> :RangerNewTab <CR>
